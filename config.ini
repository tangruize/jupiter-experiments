; config.ini
; Sample tlcwrapper.py configuration file

[options]
; file `top-module.tla' should contain module `top-module'
target: path/to/top_module.tla
; create a directory `path/to/model_name', copy all tla files to it and run tlc
model name: model_name
; default options below (optional)
; `dfs depth' also sets search mode to dfs, default is bfs
; `dump states file' also sets dump states true, default is not to dump
; `user print file` redirects Print or PrintT to file, default print to console.
#dfs depth: 100
#worker num: 1
#check deadlock: false
#checkpoint num: 30
#dump states file: filename
#user print file: filename
#other TLC options: field
#                   split by
#                   line

[behavior] ; what is the behavior spec
; choose one or none: init & next OR temporal formula
#init: Init
#next: Next
temporal formula: Spec

[invariants] ; formulas true in every reachable state
; you can define any names here
TPTypeOK: TPTypeOK
TCConsistent: TCConsistent
; Warning: multi line removes any leading spaces, and not to escape chars
multi_line_inv: /\ multi
                /\ line
                /\ inv

[properties] ; temporal formulas true for every possible behavior
; you can define any names here
TCSpec: TCSpec

[constants] ; specify the values of declared constants
; you can define any names here
Char: [model value]<symmetrical>{a, b}
Client: [model value]{c1, c2}
Server: [model value]
InitState: <<>>
Msg: Msg

[override] ; direct TLC to use alternate definitions for operators
; you can define any names here. it generates the same code as [constants] except no set of model values.
Nop: [model value]
Int: -1000..1000

[const expr] ; evaluate constant expression
expr: GCD(1,1)
