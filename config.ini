; config.ini
; Sample tlcwrapper.py configuration file

[options]
; file `top-module.tla' should contain module `top-module'
target: path/to/top_module.tla
; create a directory `path/to/model_name', copy all tla files to it and run tlc
; any filename starts with `MC' are generated by tlcwrapper.py
model name: model_name
; default options below (optional)
; `dfs depth' also sets search mode to dfs, default is bfs
; `dump states' saves states to `MC_states.dump` or `MC_states.dot` file. options are `true', `dot' or default `false'
; `coverage min` sets tlc computing coverage every n min, default is not to compute
#dfs depth: 100
#worker num: 1
#check deadlock: false
#checkpoint num: 30
#dump states: false/true/dot
#coverage min: 1
#other TLC options: field
#                   split by
#                   line

[behavior] ; what is the behavior spec
; choose one or none: init & next OR temporal formula
#init: Init
#next: Next
temporal formula: Spec

[invariants] ; formulas true in every reachable state
; you can define any names here
TPTypeOK: TPTypeOK
TCConsistent: TCConsistent
; Warning: multi line removes any leading spaces, and not to escape chars
multi_line_inv: /\ multi
                /\ line
                /\ inv

[properties] ; temporal formulas true for every possible behavior
; you can define any names here
TCSpec: TCSpec

[state constraint]; A state constraint is a formula restrict the possible states by a state predicate
; you can define an expression here
#ClientConstraint: ClientConstraint

[action constraint]; A state constraint is a formula restrict the possible transactions
; you can define an expression here
#ActionConstraint: ActionConstraint

[additional definitions]; definitions required for the model checkings
; you can define an expression here
#Additional: abc == 1

[constants] ; specify the values of declared constants
; you can define any names here
Char: [model value]<symmetrical>{a, b}
Client: [model value]{c1, c2}
Server: [model value]
InitState: <<>>
Msg: Msg

[override] ; direct TLC to use alternate definitions for operators
; you can define any names here. it generates the same code as [constants] except no set of model values.
Nop: [model value]
Int: -1000..1000

[const expr] ; evaluate constant expression
expr: GCD(1,1)
